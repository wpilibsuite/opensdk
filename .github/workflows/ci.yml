name: Build

on:
  push:
    paths-ignore:
      - ".vscode"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".vscode"
      - "**.md"

jobs:
  build-sysroot-systemcore-arm64:
    name: Build sysroot for systemcore-arm64
    runs-on: ubuntu-latest
    container: "docker.io/wpilib/opensdk-ubuntu:20.04"
    env:
      WPI_TARGET: systemcore
      WPI_TARGET_PORT: arm64
      WPI_USE_THREADS: 8
    steps:
      - uses: actions/checkout@v4
      - name: Install opensysroot
        run: |
          cd res/opensysroot
          python3 -m pip install .
      - name: Build sysroot
        run: |
          make backend
      - uses: actions/upload-artifact@v4
        with:
          name: systemcore-arm64-sysroot
          path: output/*

  build-platform-utils-systemcore-arm64:
    needs: build-sysroot-systemcore-arm64
    strategy:
      matrix:
        host:
          [
            {
              os-cfg: linux_x86_64,
              runner: ubuntu-latest,
              container: "docker.io/wpilib/opensdk-ubuntu:20.04",
              testable: true,
            },
            {
              os-cfg: windows_x86_64,
              runner: ubuntu-latest,
              container: "docker.io/wpilib/opensdk-ubuntu:20.04",
              testable: false,
            },
            {
              os-cfg: macos_x86_64,
              runner: macos-13,
              container: "",
              testable: true,
            },
            {
              os-cfg: macos_arm64,
              runner: macos-13,
              container: "",
              testable: false,
            },
          ]
    name: Build systemcore-arm64 for ${{ matrix.host.os-cfg }}
    runs-on: ${{ matrix.host.runner }}
    container: ${{ matrix.host.container }}
    env:
      WPI_HOST: ${{matrix.host.os-cfg}}
      WPI_TARGET: systemcore
      WPI_TARGET_PORT: arm64
      WPI_USE_THREADS: 8
    steps:
      - uses: actions/checkout@v4
      - name: Prep MacOS
        if: contains(matrix.host.runner, 'macos')
        run: brew install rsync texinfo
      - uses: actions/download-artifact@v4
        with:
          name: systemcore-arm64-sysroot
          path: output/
      - name: Build
        run: |
          make frontend
          rm output/*.tar
      - name: Test
        if: matrix.host.testable
        run: make test
      - name: Import Apple Developer ID Certificate
        if: contains(matrix.host.os-cfg, 'macos') &&
          github.repository_owner == 'wpilibsuite' &&
          (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: wpilibsuite/import-signing-certificate@v2
        with:
          certificate-data: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
      - name: Sign toolchain with Apple Developer ID Certificate
        if: contains(matrix.host.os-cfg, 'macos') &&
          github.repository_owner == 'wpilibsuite' &&
          (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: make sign
      - uses: actions/upload-artifact@v4
        with:
          name: systemcore-arm64-${{matrix.host.os-cfg }}
          path: output/*

  release:
    needs: [build-platform-utils-systemcore-arm64, ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Remove sysroots
        run: find -name "*.tar" -delete
      - name: Release
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          artifacts: "**/*"
          token: ${{ secrets.GITHUB_TOKEN }}
